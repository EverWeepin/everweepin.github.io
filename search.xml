[{"title":"2019-01-14","url":"http://cyantedyu.github.io/2019/01/14/2019-01-14/","content":"<h1 id=\"函数，初始作用域。-渡一教育\"><a href=\"#函数，初始作用域。-渡一教育\" class=\"headerlink\" title=\"函数，初始作用域。(渡一教育)\"></a>函数，初始作用域。(渡一教育)</h1>","categories":[],"tags":[]},{"title":"《Unix编程艺术》","url":"http://cyantedyu.github.io/2019/01/13/《Unix编程艺术》/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>什么是基础呢？<br>就是要把我们大学所学的离散数学，算法与数据结构，操作系统，计算机体系结构，<br>编译原理等课程学好，对计算机的体系，CPU本身，操作系统内核，系统平台，面向对象编程，<br>程序的性能等，要有深层次的掌握。初学者可能体会不到这些基础的重要性，<br>学习jsp,dotnet,mfc,vb的朋友甚至会对这些嗤之以鼻，但是，一开始没学好基础，<br>就去学jsp,或者dotnet会产生很坏的影响，而且陷入其中， 不能自拔。</p>\n<p>要编写除优秀的代码同样要扎实的基础，如果数据结构和算法学的不好，<br>怎么对程序的性能进行优化，怎样从类库中选择合适的数据结构，如果不了解操作系统，<br>怎样能了解这些开发工具的原理，他们都是基于操作系统的。不了解汇编，编译原理，<br>怎么知道程序运行时，要多长时间，要多少内存，就不能编出高效的代码。</p>\n<p>如果没有学好基础，一开始就去学.net，java，这些越往后，就会越觉得吃力，<br>他们涉及的技术太多了，而且不但在更新，对于三层啊，mvc,orm这些架构，你只会用，<br>也不明白为什么用，就感觉心里虚，感觉没学好。而你把 面向对象， 软件工程，设计模式这些<br>基础学好了再去看这些，就可以 以不变应万变。</p>\n<p>大家不要被新名词，新技术所迷惑。.net，XML等等技术，固然诱人，可是如果自己的基础不扎实，就像是在云里雾里行走一样，只能看到眼前，不能看到更远的地方。这些新鲜的技术掩盖了许多底层的原理，要想真正的学习技术还是走下云端，扎扎实实的把基础知识学好，有了这些基础，要掌握那些新技术也就很容易了。</p>\n<h1 id=\"1-哲学。\"><a href=\"#1-哲学。\" class=\"headerlink\" title=\"1 哲学。\"></a>1 哲学。</h1><p>Those who do not understand Unix are condemned to reinvent it, poorly.</p>\n<h1 id=\"1-1-文化？什么文化。\"><a href=\"#1-1-文化？什么文化。\" class=\"headerlink\" title=\"1.1 文化？什么文化。\"></a>1.1 文化？什么文化。</h1><p>Unix的生命力和适应力委实令人称奇。尽管其他技术如蜉蝣般生生灭灭，<br>计算机性能成千倍增长，语言历经嬗变，业界规范多次变革，然而Unix依然巍然屹立，<br>仍在运行，仍在创造价值，仍然能赢得这个星球上无数最优秀，最聪明的软件技术人员的忠诚。</p>\n<p>每过18个月，就有一半的知识会过时。<br>Unix并不承诺让你免遭此劫，只是让你的知识投资更趋于稳定。<br>因为不变的东西有很多：语言，系统调用，工具用法——<br>它们积年不变，甚至可以用上数十载。</p>\n<p>持久性知识和短期性知识有着明显的区别，<br>人们在一开始学习的时候，就能提前判断（命中率约有九成）<br>要学的知识术语哪一类。</p>\n<p>只提供机制不提供方针的哲学能使Unix长久保鲜，<br>而那些被束缚在一套方针或界面风格内的操作系统，也许早就从人们的视线中消失了。</p>\n","categories":[],"tags":["读书摘抄"]},{"title":"《HTML5权威指南》","url":"http://cyantedyu.github.io/2019/01/13/《HTML5权威指南》/","content":"<p>a 生成超链接。<br>body 表示HTML文档的内容。<br>button 生成用以提交表单的按钮。<br>code   表示计算机代码片段。</p>\n<p>DOCTYPE 表示HTML文档的开始。<br>head  表示HTML文档的头部区域。<br>hr   表示主题的改变。</p>\n<p>html   表示文档的html部分。<br>input    表示用户输入的数据。</p>\n<p>label<br>(  )</p>\n","categories":[],"tags":[]},{"title":"2019-1-13","url":"http://cyantedyu.github.io/2019/01/13/2019-1-13/","content":"<h6 id=\"Sun-Jan-13-10-34-16-CST-2019\"><a href=\"#Sun-Jan-13-10-34-16-CST-2019\" class=\"headerlink\" title=\"Sun Jan 13 10:34:16 CST 2019\"></a>Sun Jan 13 10:34:16 CST 2019</h6><p>又三天打鱼。。。。。哈哈哈哈。</p>\n<h1 id=\"函数，初始作用域。-渡一教育\"><a href=\"#函数，初始作用域。-渡一教育\" class=\"headerlink\" title=\"函数，初始作用域。(渡一教育)\"></a>函数，初始作用域。(渡一教育)</h1><p>前端岗位，也可以说是JavaScript工程师<br>JavaScript你的底层基础，直接决定你的上层建筑，</p>\n<p>这个东西学不好，后面就不用学了，<br>JavaScript，这个语言本身也是，先深后浅，</p>\n<p>闭包。</p>\n<p>函数。</p>\n<ol>\n<li>定义<ol>\n<li>函数声明。</li>\n<li>函数表达式。</li>\n</ol>\n</li>\n<li>组织形式<ol>\n<li>函数名称。</li>\n<li>参数。<ol>\n<li>形参，</li>\n<li>实参，</li>\n</ol>\n</li>\n<li>返回值。</li>\n</ol>\n</li>\n</ol>\n<p>耦合，重复，冗余，低效代码。</p>\n<p>要讲究高内聚，弱耦合原则。<br>把相同功能的代码抽取出来，<br>放入一个黑匣子里，每次用的时候，<br>调用黑匣子就好了， 不用重复写，</p>\n<p>函数，可以用来简化代码。<br>函数，其实也是个引用值，</p>\n<h1 id=\"阿里经典面试算法题剖析-动脑学院\"><a href=\"#阿里经典面试算法题剖析-动脑学院\" class=\"headerlink\" title=\"阿里经典面试算法题剖析(动脑学院)\"></a>阿里经典面试算法题剖析(动脑学院)</h1><h2 id=\"前端与算法。\"><a href=\"#前端与算法。\" class=\"headerlink\" title=\"前端与算法。\"></a>前端与算法。</h2><p>前端由于面向的是界面及交互实现，<br>所以算法研究和应用确实相对较少，<br>那么，什么时候会用的比较多？<br>模块加载器中的依赖算法。<br>编辑器中的节点关系算法，如何最优？<br>动画实现原理，几何概念等。<br>队列管理，如何设计json结构，前端排序，<br>日期相关，地图相关，游戏相关，</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Q 给阿里2W多名员工按 年龄排序，应该选择哪个算法。</p>\n<ol>\n<li>数据量 -&gt; 2W</li>\n<li>年龄   -&gt; 18~60,  -&gt; 重复的数据会比较多</li>\n<li>算法的执行效率问题。</li>\n</ol>\n","categories":[],"tags":[]},{"title":"2019-1-11","url":"http://cyantedyu.github.io/2019/01/11/2019-1-11/","content":"<h1 id=\"机器学习基石。\"><a href=\"#机器学习基石。\" class=\"headerlink\" title=\"机器学习基石。\"></a>机器学习基石。</h1><pre><code>quadratic -&gt; 二次。\nsecond-order polynomial -&gt; 二阶多项式。\nconcrete -&gt; 具体的，实在的。\n\nSupervised Learning, &quot;Right answers&quot; given,\nRegression: Predict continuous valued output(price)\n\nClassification -&gt; Discrete valued output(0 or 1)\n</code></pre><h1 id=\"ES6带你重新认识JS设计模式-amp-代理模式\"><a href=\"#ES6带你重新认识JS设计模式-amp-代理模式\" class=\"headerlink\" title=\"ES6带你重新认识JS设计模式&amp;代理模式\"></a>ES6带你重新认识JS设计模式&amp;代理模式</h1><pre><code>什么是代理模式\n    为其他对象提供一种代理以控制对这个对象的访问。\n    在某些情况下，一个对象不适合或者不能直接引用另一个对象，\n    而代理对象可以在客户端和目标对象 之间起到中介的作用，\n\n    就像租房需要中介。\n    原则。\n    1. 不能直接跟房东进行沟通。\n    2. 钱，不能直接给房东。\n\n    中介干了两件事：收钱，签合同。\n\n    代理模式有没有原则呢，vue3 使用 proxy\n    1. 单一职责原则，划分更加细的粒度。\n    2. 开放-封闭原则。预判性。\n\n手动实现双向数据绑定。\n</code></pre><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float:left;margin-right:20px;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"haha\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myArea\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span>hello, <span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:145px;width:200px;\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"inputName\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// const proxy = new Proxy(target,handler);</span></span><br><span class=\"line\">        <span class=\"comment\">// Target -&gt; 传的是一个对象，用来拦截目标对象</span></span><br><span class=\"line\">        <span class=\"comment\">// handler -&gt; 传的是一个对象，定制拦截的行为。</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//双向数据绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> myObj = &#123;</span><br><span class=\"line\">            id:<span class=\"string\">\"inputName\"</span>,</span><br><span class=\"line\">            val: <span class=\"string\">\"\"</span> <span class=\"comment\">//用来存储或者更新input的值。</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//拦截对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> inputHandler = &#123;</span><br><span class=\"line\">            set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property, newValue</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(target.id)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">document</span>.getElementById(target.id).value = newValue;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(newValue);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myObj, inputHandler);</span><br><span class=\"line\">        proxy.val = <span class=\"string\">\"for test.\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(proxy.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> myArea = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myArea\"</span>);</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOnChange</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            proxy.val = myArea.value;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(proxy.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        myArea.oninput = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            getOnChange();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"2019-1-10","url":"http://cyantedyu.github.io/2019/01/10/2019-1-10/","content":"<p>再也不想，三天打鱼，两天晒网。。。</p>\n<h1 id=\"高淇-java-5-300\"><a href=\"#高淇-java-5-300\" class=\"headerlink\" title=\"高淇-java 5/300\"></a>高淇-java 5/300</h1><pre><code>Java基础，重在培养习惯，培养兴趣。\n</code></pre><h1 id=\"高淇-java-6-300\"><a href=\"#高淇-java-6-300\" class=\"headerlink\" title=\"高淇-java 6/300\"></a>高淇-java 6/300</h1><pre><code>程序，就是逻辑思维的表达。\n任何的程序本质，只有三个，\n    1. 变量。\n    2. if语句。\n    3. 循环语句。\n</code></pre><p>   大到像windows，或者一个app，<br>   本质上，深入到底层的底层，就是这三样东西，</p>\n","categories":[],"tags":[]},{"title":"2019-1-8","url":"http://cyantedyu.github.io/2019/01/08/2019-1-8/","content":"<p>Vue实现双向绑定的原理就是利用了Object.definePoreperty()这个方法重新定义了<br>对象获取属性值(get)和设置属性值(set)的操作来实现的，</p>\n<p>为什么需要修改一个对象的现有属性？<br>对数据的拦截，处理。自定义的一些操作，<br>比如需要把数据同步，刷新，</p>\n<p>订阅，发布者模式。</p>\n<h1 id=\"高淇300-第四节课\"><a href=\"#高淇300-第四节课\" class=\"headerlink\" title=\"高淇300 第四节课\"></a>高淇300 第四节课</h1><p>高级程序员很少，<br>初级程序员不学习，会被淘汰，<br>入行之后，不再深入学习，会被淘汰，<br>任何行业都是如此，<br>竞争是很残酷的，</p>\n<p>差距就在入行的五年之内。</p>\n<p>金字塔，越往上走，竞争越不激烈，<br>不是担心青春饭的问题，<br>而是想办法自己去提高，越往上走，越稀缺，<br>一定要使劲的往前走，</p>\n<p>所有的行业，如果不进步，低端的岗位一定是青春饭，<br>没有哪个行业不是，即便你考了公务员，<br>如果你只在基层，不往上走，实际上也是青春饭，<br>如果你去当厨师，你不琢磨饭怎么做的更好，凑活就行，不学习是把，<br>那你永远都是最低端，低端的厨师，<br>那如果你天天去琢磨怎么把饭做好，弄的更好，不断的进步，不断的学习，<br>那你就是大厨，你可以去五星级酒店，七星级酒店，那又不一样了，<br>如果你有管理能力，你可以管理饭店，待遇又不一样了，<br>最后你还可以开个饭店，又不一样了，所以，<br>任何时候，没有哪一个行业是<br>很明显的青春饭，除了保安，快递，<br>一般的行业，都不是这样，</p>\n<p>不学习，不进步，任何职业都是青春饭，<br>保持学习，保持进步，任何职业都不是青春饭，<br>即便你跑快递，如果你保持进步的心态，<br>综合能力很强以后，你肯定也是快递员的头，</p>\n<h1 id=\"高淇300-第五节课\"><a href=\"#高淇300-第五节课\" class=\"headerlink\" title=\"高淇300 第五节课\"></a>高淇300 第五节课</h1><ul>\n<li>本质上，中高级的内容，就是基础的反复利用，</li>\n<li>从四个方向去努力<ul>\n<li><ol>\n<li>代码能力</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>面向对象分析能力</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>内存底层和源码分析能力</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>调式和查错能力</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>javese(java standard edition)</li>\n<li>javaee(java enterprise edition)</li>\n<li>Java基础能力培养<ul>\n<li>Java入门<ul>\n<li>了解java历史</li>\n<li>建立开发环境</li>\n<li>熟悉Eclipse使用</li>\n<li>完成第一个Java程序</li>\n</ul>\n</li>\n<li>编程能力培养<ul>\n<li><ol>\n<li>数据类型和变量，</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>控制语句</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>方法 (所有的语言都需要这三项东西)</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>面向对象基础<ul>\n<li><ol>\n<li>类和对象，</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>内存分析和垃圾回收机制，</li>\n</ol>\n<ul>\n<li>内存分析很重要，既明白底层，</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>this, static,</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>package, import,</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>面向对象进阶<ul>\n<li><ol>\n<li>三大特征（继承，封装，多态）</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Object类</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>super和继承树追溯</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>抽象类，</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>接口，</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>设计模式入门（单例，工厂，组合） </li>\n</ol>\n</li>\n<li>学新而温故</li>\n</ul>\n</li>\n<li>Java SE -&gt; Java EE</li>\n<li>异常机制<ul>\n<li><ol>\n<li>异常基本概念。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>异常处理机制。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>自定义异常，</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>常见异常如何处理，</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>数组<ul>\n<li><ol>\n<li>数组的本质也是对象。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>数组的初始化和遍历，</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>多维数组</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>算法（冒泡排序，排序优化，二分法）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>常用类，<ul>\n<li><ol>\n<li>包装类，</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>字符串相关类</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>时间相关类</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>容器<ul>\n<li><ol>\n<li>泛型</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>容器本质</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>List</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>Set</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>Map</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>Iterator 迭代器</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>IO流<ul>\n<li>流的基本操作，</li>\n<li>流的分类</li>\n<li>相关工具(Apache IO)</li>\n</ul>\n</li>\n<li>多线程技术<ul>\n<li><ol>\n<li>多线程相关基本概念，</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>创建线程类，</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>线程的状态，</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>线程通讯和协作</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>网络编程<ul>\n<li><ol>\n<li>TCP/IP基本概念</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Socket通讯经典代码，</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Socket通讯结合多线程，</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>UDP通讯入门</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"2019-1-6","url":"http://cyantedyu.github.io/2019/01/06/2019-1-6/","content":"<h6 id=\"Sun-Jan-6-06-21-12-CST-2019\"><a href=\"#Sun-Jan-6-06-21-12-CST-2019\" class=\"headerlink\" title=\"Sun Jan 6 06:21:12 CST 2019\"></a>Sun Jan 6 06:21:12 CST 2019</h6><p>受不了自己。荒废了两天哈哈哈哈。<br>什么也没学，虽然自己一直学的 东西都很基础吧<br>啊啊啊啊受不了。感觉自己好废物，<br>项目，项目，都不知道自己能做什么，哈哈哈，<br>算法，算法，怎么办，感觉自己真的弱爆了啊。。</p>\n<p>还记得大神 对我说的 “多写代码”<br>那就，多写代码把。</p>\n<h6 id=\"Sun-Jan-6-06-40-45-CST-2019\"><a href=\"#Sun-Jan-6-06-40-45-CST-2019\" class=\"headerlink\" title=\"Sun Jan 6 06:40:45 CST 2019\"></a>Sun Jan 6 06:40:45 CST 2019</h6><ul>\n<li>高淇,java，3/375。<ul>\n<li>行业选择 <ul>\n<li>21世纪行业变化很快，</li>\n<li>煤矿行业已经日落西山，</li>\n<li>不会像以前十年，二十年以前发展那么快</li>\n<li>行业的周期很长，可能一个周期，热度十年二十年，</li>\n<li>下个周期可能又是十年二十年，但对于我们人来讲，</li>\n<li>实际上我们坚守不了那么长的时间，我们的工作时间，从25岁开始上班，</li>\n<li>到45岁，有20年的黄金时间，实际上你一个人，不可能跟一个行业去拼，</li>\n<li>你是拼不过的，一个行业进入低估期，你可以考虑换一个行业</li>\n<li>这是对自己负责任的一个态度，</li>\n</ul>\n</li>\n<li>年龄的问题。<ul>\n<li>年龄因素当然要考虑，有个坎，就是30岁，</li>\n<li>30岁前转行，和30岁后转行，又不一样，30岁之前，</li>\n<li>29也好，23岁也好，21岁也好，都是20多岁，相当于</li>\n<li>还是年轻人，转行的时候，负担会少一些，</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"Sun-Jan-6-06-45-17-CST-2019\"><a href=\"#Sun-Jan-6-06-45-17-CST-2019\" class=\"headerlink\" title=\"Sun Jan 6 06:45:17 CST 2019\"></a>Sun Jan 6 06:45:17 CST 2019</h6><ul>\n<li>高淇,java，4/375。<ul>\n<li>职业晋升。</li>\n<li>青春饭的本质是，<ul>\n<li>经验值钱的行业，就不是青春饭，</li>\n<li>人脉值钱的行业，就不是青春饭，</li>\n<li>今生空间广阔，就不是青春饭，</li>\n<li>20～40岁，就应该做不同的事情，<ul>\n<li>20+岁，靠技术，</li>\n<li>30+岁，靠经验，</li>\n<li>40+岁，靠人脉，</li>\n</ul>\n</li>\n<li>靠体力，还是经验和人脉？</li>\n</ul>\n</li>\n<li>青春饭 -&gt; 快递员(无经验，人脉的积累)<ul>\n<li>干十年的快递员，和干十个月的快递员，可能没什么大的差别，</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>所以，程序员，并不是青春饭，</li>\n<li>但是，低端的岗位，任何的行业，都是青春饭，</li>\n<li>在工作，学习的时候呢，整个20～40岁之间，</li>\n<li>职业发展的黄金时期，20年，你要考虑在不同的年纪做不同的事情，</li>\n<li>20多岁要多学习，多积累技术，这是20几岁该做的事情，所有的事都需要积累</li>\n<li>30多岁可以靠经验，40岁以上，靠人脉吃饭，</li>\n<li>奇迹不会出现，即便你的哥们儿是马云，</li>\n<li>如果你到40岁仍然还在卖报纸，那马云也帮不了你，</li>\n<li>任何行业都是金字塔，大量的人员积累在金字塔底部，</li>\n<li>初级程序员竞争最激烈，4k~15k</li>\n</ul>\n","categories":[],"tags":[]},{"title":"2019-1-3","url":"http://cyantedyu.github.io/2019/01/03/2019-1-3/","content":"<p>程序员手艺的好坏是有相当大的差异的。<br>初学编程的时候，总会看到各种程序设计，<br>这样高大上的字眼，设计才是程序的核心，<br>这就意味着，编写代码的时候，就是在设计作品。<br>设计是一门脑力活，也是一门模式活，<br>从中能看出一个人的风格，从而了解一个人的水平。</p>\n<ul>\n<li><p>Java高淇300集第1集。<br>  开发项目的时候，会new很多对象，<br>  三重。</p>\n<pre><code>重代码，(现场现敲)\n重底层，(内存分析，源码分析)\n重项目，(项目穿插教学)\n</code></pre><p>  Java学完后，再去学其他语言，都一样，<br>  底层内存模型都差不多，也是互相抄的。<br>  一个星期，做个小项目，</p>\n<p>  重底层，源码分析，<br>  容器，数据结构，除了怎么用，<br>  更多的，还有源码分析，自己怎么实现，<br>  阅读别人的源码是很重要的一个习惯。</p>\n<p>  一提高你的功力，<br>  其次你在工作中也需要阅读别人的代码。</p>\n<p>  能手写服务器httpserver项目，<br>  算是Java基础集大成者，之后算是入门了。</p>\n<p>  态度：</p>\n<pre><code>要看，更要干\n很多人光看不练，\n视频收藏了一堆，从来不看，\n只有你敲了之后，内容才是你自己的，\n</code></pre><p>  决心：</p>\n<pre><code>以敲坏键盘为人生目标！\n</code></pre><p>  高淇式学习价值观：</p>\n<pre><code>知识体系建立为第一目标。\n遇到难点不纠结，一个月后再回看难点。\n\n当你第一遍听英语听力的时候，有100个单词，\n如果你卡住某个单词，你就不听了，你就什么都听不懂，\n\n最好的办法是跳过听不懂的，\n然后再结合上下文去猜测什么意思。\n\n人生的黄金时间就只在20～30岁之间，\n再想一想你这十年有多久在完，有多久在学习，\n学习时间是很有限的，\n在有限的学习时间内，如何尽快建立完整的体系，很重要，\n\n假设200个知识点，有人用十年，\n有人用两个月，你说谁的效率高，\n\n当你遇到一个点你不会的时候，\n或者怎么想都想不明白的时候呢，\n往往是这样一种情况，\n你的体系和你的问题不在一个层次。\n\n你的任务是什么呢，\n不要纠结他，把你的体系往高处提，\n学习各种各样别的知识，\n当你的体系达到那一层次的时候，\n回过头来一看，这个问题就不是问题了，\n此所谓，降维打击。\n\n一句题外话，并不太喜欢逻辑思维这样的学习，\n你会发现听上去很爽，但实际上没有任何帮助，\n因为没有帮你建立知识体系，\n你看三百集逻辑思维，远远不如去看高淇三百集。\n\n我出的三百集视频呢，是帮你建立了整个java的基础体系，\n你可以拿着他去吃饭的，他们不会帮你建立体系，\n\n人和人之间差别在哪里？也在于知识，\n不在于琐碎的知识，就在于知识体系的建立，\n\n比如，人一个博士建立了完备的知识体系，\n\n简化你的学习，互联网爆炸的时代，知识太多了，\n不用学那么多，学一套体系就足够你在这个社会立足了，\n</code></pre><p>  官网。</p>\n<pre><code>www.bjsxt.com(尚学堂官网)\nwww.sxt.cn(速学堂)\nwww.bz6000.cn(百战6000集)\n</code></pre><p>  java300集(基础，免费)<br>  java全套1101集(收费)</p>\n<p>  高薪也不是那么容易的事，是需要大量知识的。</p>\n</li>\n</ul>\n<ul>\n<li><p>Java高淇300集第2集。</p>\n<ul>\n<li>计算机语言发展史。以及，未来方向。<ul>\n<li>计算机是什么，</li>\n<li>算法，</li>\n<li>语言的分代，</li>\n</ul>\n</li>\n<li>计算机已经成为了人类身体的延伸，</li>\n<li>大脑的延伸，成为不可或缺的一部分，<br>事实上现在只要是脑力活，都离不开电脑。<br>山东科技大学，</li>\n</ul>\n<p>算法是计算机的灵魂，<br>编程语言是塑造计算机灵魂的工具。</p>\n<p>让计算机具备灵魂，<br>可以按照人的意志执行，</p>\n<p>甚至某天按照计算机自己的意志执行，其核心就是“算法”。</p>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"2018-12-31","url":"http://cyantedyu.github.io/2018/12/31/2018-12-31/","content":"<h6 id=\"Mon-Dec-31-05-30-09-CST-2018\"><a href=\"#Mon-Dec-31-05-30-09-CST-2018\" class=\"headerlink\" title=\"Mon Dec 31 05:30:09 CST 2018\"></a>Mon Dec 31 05:30:09 CST 2018</h6><p>恩…我就想试试，<br>在这个知识开放的时代，<br>作为一个零基础的弱鸡，<br>需要花多久才能月薪过8K。</p>\n<p>初步计划是，<br>前端-&gt;全栈-&gt;<br>后端(java python)。</p>\n<p>反正这里没人认识我。<br>我就啥都往这里面写和了哈哈哈哈。</p>\n<p>今天是2018年的最后一天了，洗洗睡了。<br>别再过这样的生活了。别做一辈子的废物。</p>\n","categories":[],"tags":[]},{"title":"2018-12-30","url":"http://cyantedyu.github.io/2018/12/30/2018-12-30/","content":"<p>传统页面通常用table来布局和显示数据。<br>缺点在于。</p>\n<ol>\n<li>显示的样式和数据，是整合在一起的。</li>\n<li>布局的时候，灵活度不高，画格子，</li>\n<li>一个页面可能会有大量的<table>元素，<br>本末倒置，代码就会冗余。代码冗余后，</table></li>\n<li>增加带宽，页面最终是给用户看的，是越小越好，<ol>\n<li>多200个字节，像新浪，搜狐这样的网站，</li>\n<li>一个首页，少了200字节，这个利润相当高，</li>\n<li>200字节×20000000(人)×30(days)=???,</li>\n</ol>\n</li>\n<li>搜索引擎不喜欢这样的布局。</li>\n</ol>\n<p>优点在于。</p>\n<ol>\n<li>理解起来比较简单，</li>\n<li>对不同的浏览器看到的效果，一般是一样的。</li>\n<li>显示数据还是很和的。</li>\n</ol>\n<p>div+css<br>基本思想：数据和样式要分离。<br>换肤，直接换一个css文件，就搞定。</p>\n<p>div+css是一种目前比较流行的网页布局技术。<br>div来存放需要显示的数据(文字，图表)，css就是用来指定<br>怎样显示的，从而做到数据和显示 相分离的效果。</p>\n<p>div元素是用来为html文档内大块(block-level)的内容提供<br>结构和背景的元素。</p>\n<p>css是英语Cascading Style Sheets(层叠样式表单)的缩写，<br>它是一种用来表现html或XML等文件式样的计算机 语言。<br>其实就是一些规则而已。</p>\n<p>div不再使用表格定位技术，</p>\n<ol>\n<li>div是存放内容的容器，</li>\n<li>css是用于指定放在div中的内容如何显示。</li>\n</ol>\n<p>xx通过学习，我是这么理解的。<br>主动思考，总结，是很重要的一件事。</p>\n<p>“这个技术我是这么理解的。”</p>\n","categories":[],"tags":["每日进步。"]},{"title":"Hello World","url":"http://cyantedyu.github.io/2018/12/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"Search","url":"http://cyantedyu.github.io/Search/index.html","content":"","categories":[],"tags":[]},{"title":"IROIRO","url":"http://cyantedyu.github.io/iroiro/index.html","content":"<p>Don’t go gentle<br>Into that good night.</p>\n","categories":[],"tags":[]}]